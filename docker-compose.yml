version: "3.8"

services:
  app:
    container_name: test-app
    build: .
    env_file:
      - ".env"
    command: ["python", "main.py"]
    depends_on:
      - minio

  onlyoffice:
    container_name: onlyoffice-documentserver
    image: onlyoffice/documentserver
    environment:
      - DB_TYPE=postgres
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_NAME=onlyoffice
      - DB_USER=onlyoffice
      - AMQP_URI=amqp://guest:guest@onlyoffice-rabbitmq
      - JWT_ENABLED=true
      - JWT_SECRET=secret
      - JWT_HEADER=Authorization
      - JWT_IN_BODY=true
      - DS_LOG_LEVEL=DEBUG
    depends_on:
      postgresql:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      minio:
        condition: service_started
    volumes:
      - ./onlyoffice.json:/etc/onlyoffice/documentserver/local-production-linux.json
      - /var/www/onlyoffice/Data
      - /var/log/onlyoffice
      - /var/lib/onlyoffice/documentserver/App_Data/cache/files
      - /var/www/onlyoffice/documentserver-example/public/files
      - /usr/share/fonts
    ports:
      - "80:80"
      - "443:443"
    stdin_open: true
    restart: always
    stop_grace_period: 60s

  postgresql:
    container_name: onlyoffice-postgresql
    image: postgres:9.5
    environment:
      - POSTGRES_DB=onlyoffice
      - POSTGRES_USER=onlyoffice
      - POSTGRES_HOST_AUTH_METHOD=trust
      - PGUSER=onlyoffice
    restart: always
    expose:
      - "5432"
    volumes:
      - postgresql-data:/var/lib/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "onlyoffice"]
      interval: 10s
      timeout: 3s
      retries: 3

  rabbitmq:
    container_name: onlyoffice-rabbitmq
    image: rabbitmq:alpine
    restart: always
    expose:
      - "5672"

  minio:
    image: minio/minio
    command: server --console-address ":9001" /data
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
      MINIO_SERVER_URL: ${ENDPOINT_URL}
    ports:
      - "9001:9001"
    volumes:
      - minio-data:/data

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    environment:
      BUCKET_NAME: ${BUCKET_NAME-onlyoffice}
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minio-access-key minio-secret-key;
      /usr/bin/mc mb myminio/${BUCKET_NAME};
      /usr/bin/mc policy set private myminio/${BUCKET_NAME};
      exit 0;
      "

volumes:
  postgresql-data:
  minio-data:
